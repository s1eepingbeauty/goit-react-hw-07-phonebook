{"version":3,"sources":["components/ContactForm/styles.module.css","styles.module.css","components/ContactList/styles.module.css","components/Filter/styles.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/storage.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","loading","createReducer","items","_","payload","state","filter","id","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","getContacts","getFilter","isLoading","getVisibleContacts","contact","name","toLowerCase","includes","axios","defaults","baseURL","INITIAL_STATE","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","useEffect","get","then","data","catch","error","handleChangeForm","target","value","validateForm","isExistContact","find","alert","onCheckUnique","resetForm","className","styles","contactForm","onSubmit","e","preventDefault","newContact","post","addContact","contactFormName","type","placeholder","onChange","contactFormNumber","addBtn","ContactListItem","contactListItem","removeBtn","onClick","delete","deleteContact","ContactList","length","contactList","map","Filter","contactFormFilter","App","showSpinner","phoneBookContainer","phoneBook","spinner","color","height","width","visible","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f232c75b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormName\":\"styles_contactFormName__1HnB3\",\"contactFormNumber\":\"styles_contactFormNumber__1ys-2\",\"addBtn\":\"styles_addBtn__38Qbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookContainer\":\"styles_phoneBookContainer__1p3Xe\",\"phoneBook\":\"styles_phoneBook__k1suV\",\"contacts\":\"styles_contacts__1Hrhj\",\"spinner\":\"styles_spinner__1jCvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"styles_contactList__2oxFH\",\"contactListItem\":\"styles_contactListItem__3cFHd\",\"removeBtn\":\"styles_removeBtn__2rJAi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormFilter\":\"styles_contactFormFilter__1MmO7\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/filter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n//import storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n    //contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  //devTools: process.env.NODE_ENV === 'development',\n});\n\n//const persistor = persistStore(store);\n\n//export { store, persistor };\nexport default store;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const isLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filterContacts = getFilter(state);\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterContacts),\n  );\n};","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = newContact => dispatch => {\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', newContact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport {\n  addContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations';\nimport styles from './styles.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    const isValidatedForm = validateForm();\n    if (!isValidatedForm) return;\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  const onCheckUnique = name => {\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n    isExistContact && alert(`Contact ${name} is already exist!`);\n    return !isExistContact;\n  };\n\n  const validateForm = () => {\n    if (!name || !number) {\n      alert('Some field is empty');\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  const resetForm = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmitForm}>\n      <input\n        className={styles.contactFormName}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n      />\n      <br />\n      <input\n        className={styles.contactFormNumber}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n      />\n      <br />\n      <button className={styles.addBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport styles from './styles.module.css';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className={styles.contactListItem}>\n      <button\n        className={styles.removeBtn}\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        X\n      </button>\n      {name}: {number}\n    </li>\n  );\n};\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={styles.contactList}>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} {...contact} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport styles from './styles.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const addFilter = value => {\n    dispatch(filterContacts(value.toLowerCase()));\n  };\n\n  return (\n    <input\n      className={styles.contactFormFilter}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={({ target }) => addFilter(target.value)}\n      placeholder=\"Enter name for Search\"\n    />\n  );\n};\n\nexport default Filter;\n","import ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Loader from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { isLoading } from './redux/contacts/contacts-selectors';\nimport styles from './styles.module.css';\n\nconst App = () => {\n  const showSpinner = useSelector(isLoading);\n  return (\n    <div className={styles.phoneBookContainer}>\n      <div className={styles.phoneBook}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div className={styles.contacts}>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        <Loader\n          className={styles.spinner}\n            type=\"ThreeDots\"\n            color=\"#00BFFF\"\n            height={80}\n            width={80}\n            visible={showSpinner}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/storage';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <App />\n    {/* </PersistGate> */}\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}